---
title-block-banner: true
title: "Simulating data to estimate power:  Level up from G*Power"
date: last-modified
date-format: long
author: 
  - name: Patrick E. McKnight
    id: pem
    orcid: 
    email: pmcknigh@gmu.edu
    affiliation: 
      - name: George Mason University
        city: Fairfax,
        state: VA
        url: www.mres-gmu.org
abstract:  |
  Power - the probably of success in the frequentist world - gets attention mostly out of necessity. Many see power analyses as a hurdle to get funding while others treat it as privileged domain for the technically capable. Neither reality need be true in this brave new world. We plan to shed a different light on the topic by demonstrating power analysis by simulation. No, we are not using large language models to estimate power but we are using the power of randomization to generate data and, in turn, power estimates. You will learn that you too can do the very same with little to no technical knowledge. Come, learn, and later teach us after you perfect the techniques.
keywords:
  - Statistical Power
  - Simulation
  - R/shiny
license: "CC BY"
copyright:
  holder: Patrick E. McKnight
  year: 2023
format: html
server: shiny
---
Estimating power can be challenging for most of us. Even the seasoned academic finds computing statistical power beyond reach. The concepts are simple enough but the complexities of either the software or the models leaves many to offload the work to more expert data analysts. Those analysts often rely on the same complex software to estimate complex models in the least intuitive manner. Here, we reintroduce the simple concepts of statistical power and then offer an alternative set of procedures that we hope leads more to assume control of their own data analyses.

Before we talk about power, we need to address null hypothesis significance testing (NHST). Why? Well, power is the probabiliity of success in the NHST world and really only in that world. If you don't understand that world then how can you understand power? You can't. So, let's dive into this world first.

# NHST

The world of social science statistics largely revolves around the same ideas. We have a theory (Dogs are superior to cats).

$$
Dog >> cat
$$

That theory gets translated into an operation (Dog people are better than cat people).

$$
H: \bar{X}_{Dog} > \bar{X}_{cat}
$$

That operation is what we hope to discover as different to support our hypothesis that dogs are superior to cats. It wouldn't matter what measure you collected, dogs would always outperform cats.

BUT we don't test that difference directly. Instead, we test the null. What is the null you ask? The null is really the nil or, quite simply that there is no difference (Dog people are equal to cat people).

$$
H_0: \bar{X}_{Dog} = \bar{X}_{cat}
$$

Now, why would we do this? Good question that is beyond the reach of this presentation. Since we do it, let's learn it. The null hypothesis is:

$$
P(Result | H_0)
$$

What does that mean?

$$
P(): \mbox{Probablity (range 0 - 1)}
$$

$$
Result:  \mbox{Statistic computed (mean difference)}
$$

$$
H_0: \mbox{Null Hypothesis } (Dogs = cats)
$$
Given the null (i.e., the hypothesis we usually are NOT interested in testing), we must assess whether our results match it.  Often they do not.  But what are these results?  We use results that are computed from the data.  For example, we might be interested in the mean difference between reported happiness for dog and cat lovers.  Often, students find this part to be the hardest and, admittedly, it can be quite challenging.  We must "operationalize" the mean difference into scale that reflects the difference but also has a known shape.



```{r}
#| label: setup
#| include: false
library('paramtest')
library('pwr')
library('ggplot2')
library('knitr')
library('nlme')
library('lavaan')
library('dplyr')
library(bslib) # the prime driver here for UI
```


## Univariate Playground

```{r}
#| label: ui
#| panel: sidebar
sliderInput("Ndemo","Sample Size", min=0, max=1000, value=150)
sliderInput("MUdemo", "Mean", min = 0, max = 15, value=5)
sliderInput("SDdemo", "SD", min = 0, max = 15, value=5)
sliderInput("Rel","Reliability of Measure", min=0, max=1, value = .8)
```


```{r}
plotOutput("p1")
```


```{r}
#| context: server
  genDat <- reactive({
      data.frame(obs=1:input$Ndemo, 
                 x=rnorm(input$Ndemo, 
                         input$MUdemo, 
                         sqrt((input$SDdemo^2)/input$Rel)))
  })
  
  output$p1 <- renderPlot({
      # draw the histogram with the specified number of bins
      ggplot(genDat(),aes(x=x)) + 
         geom_histogram(aes(y = ..density..)) +
         geom_density(fill = "#56B4E9", 
                      alpha=.2) +
         geom_vline(aes(xintercept = 0), 
                    color = "blue", 
                    linetype = "dashed", 
                    size = 1) +
         geom_vline(aes(xintercept = mean(x)), 
                    color = "red", 
                    size = 1) +
         geom_rect(aes(xmin = (mean(x) - 1.97*sd(x)/sqrt(length(x))),
                       xmax = (mean(x) + 1.97*sd(x)/sqrt(length(x))),
                       ymin=0, ymax = Inf), 
                   alpha = .01, fill = "pink")
  })

```



## Shiny Documents

This Quarto document is made interactive using Shiny. Interactive documents allow readers to modify parameters and see the results immediately. Learn more about Shiny interactive documents at <https://quarto.org/docs/interactive/shiny/>.

## Inputs and Outputs

You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change. This demonstrates how a standard R plot can be made interactive:

```{r}
sliderInput("bins", "Number of bins:", 
            min = 1, max = 50, value = 30)
plotOutput("distPlot")
```

```{r}
#| context: server
output$distPlot <- renderPlot({
   x <- faithful[, 2]  # Old Faithful Geyser data
   bins <- seq(min(x), max(x), length.out = input$bins + 1)
   hist(x, breaks = bins, col = 'darkgray', border = 'white',
        xlab = 'Waiting time to next eruption (in mins)',
        main = 'Histogram of waiting times')
})
```
